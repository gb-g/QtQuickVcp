#!/usr/bin/env bash

# Build a portable AppImage starting from a clean system. Other examples at:
# https://github.com/probonopd/AppImages/blob/master/recipes/scribus/Recipe

# NOTES:
#
# 1) IT IS NOT SAFE TO RUN THIS RECIPE ON A PERSISTENT FILESYSTEM! Use either:
#      * A chroot into a Live ISO, squashfs or Docker Image.
#      * Or, a virtual machine on a dedicated build server (e.g. Travis CI)
#    DO NOT RUN THE RECIPE ON A NORMAL COMPUTER OUTSIDE OF A TEMPORARY CHROOT!
#

set -e # Halt on errors
set -x # Be verbose

##########################################################################
# CHECK SYSTEM
##########################################################################

# This script should be run inside CentOS 6 if possible,
# or CentOS 7 if 6 is unavailable for your architecture.
if [ "$(grep "Debian GNU/Linux 9 (stretch)" /etc/*release*)" ]; then
  OS="Debian Stretch"
else
  echo "${0}: Warning: Not running on Debian Stretch!" >&2
fi

##########################################################################
# GET DEPENDENCIES
##########################################################################
# only prepare system if not already prepared (custom docker image)
if [ ! -f /etc/system-prepared ]; then
./init.sh
fi

##########################################################################
# BUILD QTQUICKVCP
##########################################################################
export PATH="/qt5/bin:$PATH"
export LD_LIBRARY_PATH="/qt5/lib:$LD_LIBRARY_PATH"
export QT_PLUGIN_PATH="/qt5/plugins"
export QML_IMPORT_PATH="/qt5/qml"
export QML2_IMPORT_PATH="/qt5/qml"
export QT_QPA_PLATFORM_PLUGIN_PATH="/qt5/plugins/platforms"
export QT_TRANSLATIONS_PATH="/qt5/translations"
export QT_INSTALL_PREFIX="/qt5"

mkdir -p build.release
cd build.release

qmake -r ..
make -j$((`nproc` + 1))
# make docs
sudo make install
# make install_docs

# compress QtQuick module
zipfile="QtQuickVcp.tar.gz"
mkdir qml
mkdir lib
cp -r ${QML_IMPORT_PATH}/Machinekit qml/Machinekit
cp ${QT_INSTALL_PREFIX}/lib/libmachinetalk* lib/
tar -zcf $zipfile qml lib translations
# allow access to archive from outside the chroot
chmod a+rwx $zipfile
chmod a+rwx .
ls -lh $zipfile
rm -r qml
rm -r lib

# create binary zip file
qt-deploy ../build/deployment-scripts/linux_x64.ini --deploy

# prepare AppDir
cd MachinekitClient.AppDir
cp -r ../translations .
cp ${QT_TRANSLATIONS_PATH}/*_de.qm translations/
cp ${QT_TRANSLATIONS_PATH}/*_ru.qm translations/
cp ${QT_TRANSLATIONS_PATH}/*_es.qm translations/
cp ${QT_TRANSLATIONS_PATH}/*_zh_CN.qm translations/
cp /usr/share/pixmaps/machinekit.png .
cp /usr/share/applications/machinekit-client.desktop .
mv machinekit-client AppRun
cd ..

# prepare variables
appdir=${PWD}/MachinekitClient.AppDir/
appimage=${PWD}/MachinekitClient.AppImage

# back to home folder
cd ../

# cleanup plugins.qmltypes files here, since they have been created with sudo
sudo chown -R `whoami` ./build.release

##########################################################################
# PACKAGE INTO APPIMAGE WITH APPIMAGEKIT
##########################################################################

cd /AppImageKit/AppImageAssistant.AppDir
./package  "$appdir" "$appimage"

# allow access to AppImage from outside the chroot
chmod a+rwx "$appimage"
parent_dir="$(dirname "$appimage")"
while [ "$(dirname "$parent_dir")" != "$parent_dir" ]; do
  [ "$parent_dir" == "/" ] && break
  chmod a+rwx "$parent_dir"
  parent_dir="$(dirname "$parent_dir")"
done

ls -lh "$appimage"
